/**
 * Google DriveÁîªÂÉè„Éî„ÉÉ„Ç´„ÉºUI
 * chrome.identity API„Çí‰ΩøÁî®„Åó„Å¶Google Drive„Åã„ÇâÁõ¥Êé•ÁîªÂÉè„ÇíÂèñÂæó
 */

import { getGoogleDriveAPI } from '../lib/google-drive-api.js';

export class DriveImagePicker {
    constructor() {
        this.isOpen = false;
        this.modal = null;
        this.items = [];  // „Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„ÅÆ‰∏°Êñπ„ÇíÂê´„ÇÄ
        this.onSelectCallback = null;
        this.selectedImage = null;
        this.driveAPI = getGoogleDriveAPI();
        this.currentFolderId = null;  // null = „É´„Éº„ÉàÔºà„Éû„Ç§„Éâ„É©„Ç§„ÉñÔºâ
        this.folderPath = [];  // „Éë„É≥„Åè„Åö„É™„Çπ„ÉàÁî®: [{id: null, name: '„Éû„Ç§„Éâ„É©„Ç§„Éñ'}]
        this.currentUserEmail = null;
    }

    /**
     * „É¢„Éº„ÉÄ„É´„ÇíÂàùÊúüÂåñ
     */
    initialize() {
        this.createModal();
        this.attachEventListeners();
    }

    /**
     * „É¢„Éº„ÉÄ„É´HTML„Çí‰ΩúÊàê
     */
    createModal() {
        this.modal = document.createElement('div');
        this.modal.id = 'drive-image-picker-modal';
        this.modal.className = 'drive-picker-modal hidden';
        this.modal.innerHTML = `
            <div class="drive-picker-overlay"></div>
            <div class="drive-picker-content">
                <div class="drive-picker-header">
                    <div class="header-left">
                        <h3>üìÅ Google DriveÁîªÂÉè„ÇíÈÅ∏Êäû</h3>
                        <div class="account-info" id="account-info">
                            <span class="account-email" id="account-email"></span>
                            <button class="btn-switch-account" id="btn-switch-account" title="„Ç¢„Ç´„Ç¶„É≥„ÉàÂàá„ÇäÊõø„Åà">üîÑ</button>
                        </div>
                    </div>
                    <button class="drive-picker-close-btn" title="Èñâ„Åò„Çã">√ó</button>
                </div>
                <div class="drive-picker-toolbar">
                    <div class="breadcrumb" id="breadcrumb">
                        <span class="breadcrumb-item">üìÇ „Éû„Ç§„Éâ„É©„Ç§„Éñ</span>
                    </div>
                </div>
                <div class="drive-picker-body">
                    <div class="drive-picker-loading" id="drive-picker-loading">
                        <div class="spinner"></div>
                        <p>Ë™≠„ÅøËæº„Åø‰∏≠...</p>
                    </div>
                    <div class="drive-picker-error hidden" id="drive-picker-error">
                        <p class="error-message"></p>
                        <button class="retry-btn">ÂÜçË©¶Ë°å</button>
                    </div>
                    <div class="drive-picker-grid hidden" id="drive-picker-grid">
                        <!-- „Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                    </div>
                </div>
                <div class="drive-picker-footer">
                    <div class="drive-picker-info">
                        <span id="selected-image-name">ÁîªÂÉè„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</span>
                    </div>
                    <div class="drive-picker-actions">
                        <button class="btn-cancel">„Ç≠„É£„É≥„Çª„É´</button>
                        <button class="btn-select" id="btn-select" disabled>ÈÅ∏Êäû</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(this.modal);

        // CSS„ÇíËøΩÂä†
        this.injectStyles();
    }

    /**
     * „Çπ„Çø„Ç§„É´„ÇíËøΩÂä†
     */
    injectStyles() {
        if (document.getElementById('drive-picker-styles')) return;

        const style = document.createElement('style');
        style.id = 'drive-picker-styles';
        style.textContent = `
            .drive-picker-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .drive-picker-modal.hidden {
                display: none;
            }

            .drive-picker-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                backdrop-filter: blur(2px);
            }

            .drive-picker-content {
                position: relative;
                width: 90%;
                max-width: 800px;
                height: 80vh;
                max-height: 700px;
                background: #ffffff;
                border-radius: 12px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
                display: flex;
                flex-direction: column;
                overflow: hidden;
                animation: modalFadeIn 0.2s ease;
            }

            @keyframes modalFadeIn {
                from {
                    opacity: 0;
                    transform: scale(0.95);
                }
                to {
                    opacity: 1;
                    transform: scale(1);
                }
            }

            .drive-picker-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                padding: 20px 24px;
                border-bottom: 1px solid #e0e0e0;
                background: #f8f9fa;
            }

            .header-left {
                display: flex;
                flex-direction: column;
                gap: 8px;
            }

            .drive-picker-header h3 {
                margin: 0;
                font-size: 20px;
                font-weight: 600;
                color: #333;
            }

            .account-info {
                display: flex;
                align-items: center;
                gap: 8px;
                font-size: 13px;
                color: #666;
            }

            .account-email {
                padding: 4px 8px;
                background: #fff;
                border: 1px solid #e0e0e0;
                border-radius: 4px;
            }

            .btn-switch-account {
                padding: 4px 8px;
                background: #fff;
                border: 1px solid #e0e0e0;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                transition: all 0.2s;
            }

            .btn-switch-account:hover {
                background: #f0f0f0;
                border-color: #4285f4;
            }

            .drive-picker-toolbar {
                display: flex;
                align-items: center;
                padding: 12px 24px;
                background: #fff;
                border-bottom: 1px solid #e0e0e0;
                min-height: 48px;
            }

            .breadcrumb {
                display: flex;
                align-items: center;
                gap: 8px;
                flex-wrap: wrap;
                font-size: 14px;
            }

            .breadcrumb-item {
                display: flex;
                align-items: center;
                color: #666;
                cursor: default;
            }

            .breadcrumb-item.clickable {
                color: #4285f4;
                cursor: pointer;
                transition: all 0.2s;
            }

            .breadcrumb-item.clickable:hover {
                color: #3367d6;
                text-decoration: underline;
            }

            .breadcrumb-separator {
                color: #999;
                margin: 0 4px;
            }

            .drive-picker-close-btn {
                background: none;
                border: none;
                font-size: 28px;
                color: #666;
                cursor: pointer;
                padding: 0;
                width: 32px;
                height: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 4px;
                transition: all 0.2s;
            }

            .drive-picker-close-btn:hover {
                background: #e0e0e0;
                color: #333;
            }

            .drive-picker-body {
                flex: 1;
                overflow-y: auto;
                padding: 24px;
                position: relative;
            }

            .drive-picker-loading {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 100%;
                color: #666;
            }

            .spinner {
                width: 48px;
                height: 48px;
                border: 4px solid #e0e0e0;
                border-top-color: #4285f4;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin-bottom: 16px;
            }

            @keyframes spin {
                to { transform: rotate(360deg); }
            }

            .drive-picker-error {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 100%;
                text-align: center;
                color: #d32f2f;
            }

            .drive-picker-error.hidden {
                display: none;
            }

            .error-message {
                margin-bottom: 16px;
                font-size: 16px;
            }

            .retry-btn {
                padding: 10px 24px;
                background: #4285f4;
                color: white;
                border: none;
                border-radius: 6px;
                font-size: 14px;
                cursor: pointer;
                transition: background 0.2s;
            }

            .retry-btn:hover {
                background: #3367d6;
            }

            .drive-picker-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
                gap: 16px;
            }

            .drive-picker-grid.hidden {
                display: none;
            }

            .drive-item {
                position: relative;
                aspect-ratio: 1;
                border: 2px solid transparent;
                border-radius: 8px;
                overflow: hidden;
                cursor: pointer;
                transition: all 0.2s;
                background: #f5f5f5;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }

            .drive-item:hover {
                border-color: #4285f4;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(66, 133, 244, 0.2);
            }

            .drive-item.selected {
                border-color: #4285f4;
                box-shadow: 0 4px 16px rgba(66, 133, 244, 0.3);
            }

            .drive-item.folder {
                background: #fff;
            }

            .drive-item.folder .folder-icon {
                font-size: 48px;
                margin-bottom: 8px;
            }

            .drive-item.image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                position: absolute;
                top: 0;
                left: 0;
            }

            .drive-item .item-name {
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
                padding: 8px;
                background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);
                color: white;
                font-size: 12px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                z-index: 1;
            }

            .drive-item.folder .item-name {
                position: static;
                background: none;
                color: #333;
                padding: 0;
                margin-top: 8px;
                text-align: center;
            }

            .drive-item .selected-check {
                position: absolute;
                top: 8px;
                right: 8px;
                width: 24px;
                height: 24px;
                background: #4285f4;
                border-radius: 50%;
                display: none;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 14px;
                z-index: 2;
            }

            .drive-item.selected .selected-check {
                display: flex;
            }

            .drive-picker-footer {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 16px 24px;
                border-top: 1px solid #e0e0e0;
                background: #f8f9fa;
            }

            .drive-picker-info {
                font-size: 14px;
                color: #666;
            }

            .drive-picker-actions {
                display: flex;
                gap: 12px;
            }

            .drive-picker-actions button {
                padding: 10px 20px;
                border: none;
                border-radius: 6px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.2s;
            }

            .btn-cancel {
                background: #f5f5f5;
                color: #333;
            }

            .btn-cancel:hover {
                background: #e0e0e0;
            }

            .btn-select {
                background: #4285f4;
                color: white;
            }

            .btn-select:hover:not(:disabled) {
                background: #3367d6;
            }

            .btn-select:disabled {
                background: #ccc;
                cursor: not-allowed;
                opacity: 0.6;
            }
        `;

        document.head.appendChild(style);
    }

    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
     */
    attachEventListeners() {
        // Èñâ„Åò„Çã„Éú„Çø„É≥
        const closeBtn = this.modal.querySelector('.drive-picker-close-btn');
        closeBtn.addEventListener('click', () => this.close());

        // „Ç™„Éº„Éê„Éº„É¨„Ç§„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
        const overlay = this.modal.querySelector('.drive-picker-overlay');
        overlay.addEventListener('click', () => this.close());

        // „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥
        const cancelBtn = this.modal.querySelector('.btn-cancel');
        cancelBtn.addEventListener('click', () => this.close());

        // ÈÅ∏Êäû„Éú„Çø„É≥
        const selectBtn = this.modal.querySelector('.btn-select');
        selectBtn.addEventListener('click', () => this.selectImage());

        // ÂÜçË©¶Ë°å„Éú„Çø„É≥
        const retryBtn = this.modal.querySelector('.retry-btn');
        retryBtn.addEventListener('click', () => this.loadInitialData());

        // „Ç¢„Ç´„Ç¶„É≥„ÉàÂàá„ÇäÊõø„Åà„Éú„Çø„É≥
        const switchAccountBtn = this.modal.querySelector('#btn-switch-account');
        switchAccountBtn.addEventListener('click', () => this.switchAccount());

        // ESC„Ç≠„Éº„ÅßÈñâ„Åò„Çã
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        });
    }

    /**
     * „É¢„Éº„ÉÄ„É´„ÇíÈñã„Åè
     */
    async open() {
        console.log('[DEBUG] DriveImagePicker.open() called');
        console.log('[DEBUG] this.isOpen:', this.isOpen);
        console.log('[DEBUG] this.modal:', this.modal);

        if (this.isOpen) return;

        this.isOpen = true;
        this.modal.classList.remove('hidden');
        this.selectedImage = null;
        console.log('[DEBUG] Modal should be visible now');

        // ÂàùÊúü„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÅøÔºà„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÄÅ„Éï„Ç©„É´„ÉÄ„ÄÅÁîªÂÉèÔºâ
        await this.loadInitialData();
    }

    /**
     * „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
     */
    close() {
        this.isOpen = false;
        this.modal.classList.add('hidden');
        this.selectedImage = null;
    }

    /**
     * ÂàùÊúü„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÅøÔºà„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å®„É´„Éº„Éà„Éï„Ç©„É´„ÉÄÔºâ
     */
    async loadInitialData() {
        const loadingEl = this.modal.querySelector('#drive-picker-loading');
        const errorEl = this.modal.querySelector('#drive-picker-error');
        const gridEl = this.modal.querySelector('#drive-picker-grid');

        // Ë°®Á§∫Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        loadingEl.classList.remove('hidden');
        errorEl.classList.add('hidden');
        gridEl.classList.add('hidden');

        try {
            // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            await this.loadUserInfo();

            // „É´„Éº„Éà„Éï„Ç©„É´„ÉÄÔºà„Éû„Ç§„Éâ„É©„Ç§„ÉñÔºâ„ÇíË°®Á§∫
            this.currentFolderId = null;
            this.folderPath = [{ id: null, name: '„Éû„Ç§„Éâ„É©„Ç§„Éñ' }];
            this.updateBreadcrumb();

            // „Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„ÇíÂèñÂæó
            await this.loadFolderContents(this.currentFolderId);

            loadingEl.classList.add('hidden');
            gridEl.classList.remove('hidden');

        } catch (error) {
            console.error('Failed to load initial data:', error);

            loadingEl.classList.add('hidden');
            errorEl.classList.remove('hidden');

            const errorMessage = errorEl.querySelector('.error-message');
            errorMessage.textContent = `„Ç®„É©„Éº: ${error.message}`;
        }
    }

    /**
     * „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶Ë°®Á§∫
     */
    async loadUserInfo() {
        try {
            const userInfo = await this.driveAPI.getUserInfo();
            this.currentUserEmail = userInfo.emailAddress;

            const emailEl = this.modal.querySelector('#account-email');
            emailEl.textContent = this.currentUserEmail;

            console.log('[DEBUG] User email:', this.currentUserEmail);
        } catch (error) {
            console.error('Failed to load user info:', error);
            const emailEl = this.modal.querySelector('#account-email');
            emailEl.textContent = '„Ç®„É©„Éº';
        }
    }

    /**
     * „Éï„Ç©„É´„ÉÄ„ÅÆÂÜÖÂÆπ„ÇíË™≠„ÅøËæº„ÅøÔºà„Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„ÅÆ‰∏°ÊñπÔºâ
     */
    async loadFolderContents(folderId) {
        console.log('[DEBUG] loadFolderContents() called, folderId:', folderId);

        try {
            // „Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„ÇíÂèñÂæó
            this.items = await this.driveAPI.getFolderContents(folderId);
            console.log('[DEBUG] Retrieved items:', this.items.length);

            // „Ç∞„É™„ÉÉ„Éâ„ÇíË°®Á§∫
            this.renderGrid();

        } catch (error) {
            console.error('Failed to load folder contents:', error);
            throw error;
        }
    }

    /**
     * „Éë„É≥„Åè„Åö„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
     */
    updateBreadcrumb() {
        const breadcrumbEl = this.modal.querySelector('#breadcrumb');
        breadcrumbEl.innerHTML = '';

        this.folderPath.forEach((folder, index) => {
            // „Éë„É≥„Åè„Åö„Ç¢„Ç§„ÉÜ„É†
            const item = document.createElement('span');
            item.className = 'breadcrumb-item';

            // ÊúÄÂæå„ÅÆ„Ç¢„Ç§„ÉÜ„É†‰ª•Â§ñ„ÅØ„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ
            if (index < this.folderPath.length - 1) {
                item.classList.add('clickable');
                item.addEventListener('click', () => this.navigateToFolder(folder.id, index));
            }

            item.textContent = index === 0 ? `üìÇ ${folder.name}` : folder.name;
            breadcrumbEl.appendChild(item);

            // „Çª„Éë„É¨„Éº„Çø„ÉºÔºàÊúÄÂæå‰ª•Â§ñÔºâ
            if (index < this.folderPath.length - 1) {
                const separator = document.createElement('span');
                separator.className = 'breadcrumb-separator';
                separator.textContent = '‚Ä∫';
                breadcrumbEl.appendChild(separator);
            }
        });
    }

    /**
     * „Éï„Ç©„É´„ÉÄ„Å´ÁßªÂãï
     */
    async navigateToFolder(folderId, pathIndex = null) {
        console.log('[DEBUG] Navigating to folder:', folderId);

        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
        const loadingEl = this.modal.querySelector('#drive-picker-loading');
        const gridEl = this.modal.querySelector('#drive-picker-grid');
        gridEl.classList.add('hidden');
        loadingEl.classList.remove('hidden');

        try {
            // „Éë„É≥„Åè„Åö„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
            if (pathIndex !== null) {
                // „Éë„É≥„Åè„Åö„Åã„Çâ„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂ†¥Âêà„ÄÅ„Åù„Åì„Åæ„ÅßÊàª„Çã
                this.folderPath = this.folderPath.slice(0, pathIndex + 1);
            }

            this.currentFolderId = folderId;
            this.updateBreadcrumb();

            // „Éï„Ç©„É´„ÉÄÂÜÖÂÆπ„ÇíË™≠„ÅøËæº„Åø
            await this.loadFolderContents(folderId);

            loadingEl.classList.add('hidden');
            gridEl.classList.remove('hidden');

        } catch (error) {
            console.error('Failed to navigate to folder:', error);
            alert('„Éï„Ç©„É´„ÉÄ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
            loadingEl.classList.add('hidden');
        }
    }

    /**
     * „Éï„Ç©„É´„ÉÄ„ÇíÈñã„ÅèÔºà„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÊôÇÔºâ
     */
    async openFolder(folder) {
        console.log('[DEBUG] Opening folder:', folder.name);

        // „Éï„Ç©„É´„ÉÄ„Éë„Çπ„Å´ËøΩÂä†
        this.folderPath.push({ id: folder.id, name: folder.name });

        // „Éï„Ç©„É´„ÉÄ„Å´ÁßªÂãï
        await this.navigateToFolder(folder.id);
    }

    /**
     * „Ç¢„Ç´„Ç¶„É≥„ÉàÂàá„ÇäÊõø„Åà
     */
    async switchAccount() {
        const confirmed = confirm('„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂàá„ÇäÊõø„Åà„Åæ„Åô„ÅãÔºü\nÊñ∞„Åó„ÅÑ„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åô„ÄÇ');
        if (!confirmed) return;

        try {
            // „Éà„Éº„ÇØ„É≥„ÇíÂâäÈô§
            await this.driveAPI.logout();

            // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
            const loadingEl = this.modal.querySelector('#drive-picker-loading');
            const gridEl = this.modal.querySelector('#drive-picker-grid');
            const errorEl = this.modal.querySelector('#drive-picker-error');

            gridEl.classList.add('hidden');
            errorEl.classList.add('hidden');
            loadingEl.classList.remove('hidden');

            // Êñ∞„Åó„ÅÑ„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„É≠„Ç∞„Ç§„É≥Ôºàinteractive=true„Åß„Ç¢„Ç´„Ç¶„É≥„ÉàÈÅ∏ÊäûÁîªÈù¢„ÇíË°®Á§∫Ôºâ
            await this.loadInitialData();

            console.log('[DEBUG] Account switched successfully');

        } catch (error) {
            console.error('Failed to switch account:', error);

            // „Ç®„É©„ÉºË°®Á§∫
            const loadingEl = this.modal.querySelector('#drive-picker-loading');
            const errorEl = this.modal.querySelector('#drive-picker-error');

            loadingEl.classList.add('hidden');
            errorEl.classList.remove('hidden');

            const errorMessage = errorEl.querySelector('.error-message');
            errorMessage.textContent = `„Ç¢„Ç´„Ç¶„É≥„ÉàÂàá„ÇäÊõø„Åà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`;
        }
    }

    /**
     * „Ç∞„É™„ÉÉ„Éâ„ÇíÊèèÁîªÔºà„Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉèÔºâ
     */
    renderGrid() {
        const gridEl = this.modal.querySelector('#drive-picker-grid');
        gridEl.innerHTML = '';

        if (this.items.length === 0) {
            gridEl.innerHTML = '<p style="text-align: center; color: #666;">„Éï„Ç©„É´„ÉÄ„ÇÇÁîªÂÉè„ÇÇË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü</p>';
            return;
        }

        // „Éï„Ç©„É´„ÉÄ„Å®ÁîªÂÉè„ÇíÂàÜ„Åë„Å¶„ÇΩ„Éº„ÉàÔºà„Éï„Ç©„É´„ÉÄ„ÅåÂÖàÔºâ
        const folders = this.items.filter(item => item.type === 'folder');
        const images = this.items.filter(item => item.type === 'image');

        // „Éï„Ç©„É´„ÉÄ„ÇíÊèèÁîª
        folders.forEach(folder => {
            const itemEl = document.createElement('div');
            itemEl.className = 'drive-item folder';
            itemEl.dataset.folderId = folder.id;

            itemEl.innerHTML = `
                <div class="folder-icon">üìÅ</div>
                <div class="item-name">${folder.name}</div>
            `;

            // „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åß„Éï„Ç©„É´„ÉÄ„ÇíÈñã„Åè
            itemEl.addEventListener('dblclick', () => this.openFolder(folder));

            gridEl.appendChild(itemEl);
        });

        // ÁîªÂÉè„ÇíÊèèÁîª
        images.forEach(image => {
            const itemEl = document.createElement('div');
            itemEl.className = 'drive-item image';
            itemEl.dataset.fileId = image.file_id;

            // „Çµ„É†„Éç„Ç§„É´„Åæ„Åü„ÅØ„Ç¢„Ç§„Ç≥„É≥„ÇíË°®Á§∫
            const thumbnailUrl = image.thumbnail_link || this.getFileIcon(image.mime_type);

            itemEl.innerHTML = `
                <img src="${thumbnailUrl}" alt="${image.file_name}" loading="lazy">
                <div class="item-name">${image.file_name}</div>
                <div class="selected-check">‚úì</div>
            `;

            // „Ç∑„É≥„Ç∞„É´„ÇØ„É™„ÉÉ„ÇØ„ÅßÈÅ∏Êäû
            itemEl.addEventListener('click', () => this.selectImageItem(image, itemEl));

            gridEl.appendChild(itemEl);
        });
    }

    /**
     * „Éï„Ç°„Ç§„É´„Ç¢„Ç§„Ç≥„É≥„ÇíÂèñÂæó
     */
    getFileIcon(mimeType) {
        // Á∞°ÊòìÁöÑ„Å™„Ç¢„Ç§„Ç≥„É≥Ôºà„Éá„Éº„ÇøURLÔºâ
        return 'data:image/svg+xml,' + encodeURIComponent(`
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
                <rect fill="#4285f4" width="100" height="100"/>
                <text x="50" y="55" font-size="14" fill="white" text-anchor="middle" font-family="sans-serif">IMAGE</text>
            </svg>
        `);
    }

    /**
     * ÁîªÂÉè„Ç¢„Ç§„ÉÜ„É†„ÇíÈÅ∏Êäû
     */
    selectImageItem(image, itemEl) {
        // ‰ªñ„ÅÆÈÅ∏Êäû„ÇíËß£Èô§
        const allItems = this.modal.querySelectorAll('.drive-item');
        allItems.forEach(item => item.classList.remove('selected'));

        // ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åô„Çã
        itemEl.classList.add('selected');
        this.selectedImage = image;

        // UIÊõ¥Êñ∞
        const selectedNameEl = this.modal.querySelector('#selected-image-name');
        selectedNameEl.textContent = image.file_name;

        const selectBtn = this.modal.querySelector('#btn-select');
        selectBtn.disabled = false;
    }

    /**
     * ÈÅ∏Êäû„Åó„ÅüÁîªÂÉè„ÇíÁ¢∫ÂÆö
     */
    async selectImage() {
        if (!this.selectedImage) return;

        try {
            console.log('[DEBUG] Getting file metadata...');
            const metadata = await this.driveAPI.getFileMetadata(this.selectedImage.file_id);

            // webContentLink„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if (metadata.webContentLink) {
                console.log('[DEBUG] File has webContentLink:', metadata.webContentLink);

                // URL„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Çã„Åã„ÉÜ„Çπ„Éà
                try {
                    const testResponse = await fetch(metadata.webContentLink, { method: 'HEAD' });

                    if (testResponse.ok) {
                        // „Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ - ÂÖ¨ÈñãURL„Çí‰ΩøÁî®
                        console.log('[DEBUG] File is publicly accessible');
                        this.returnImageUrl(metadata.webContentLink);
                        return;
                    }
                } catch (e) {
                    console.log('[DEBUG] File is not publicly accessible');
                }
            }

            // „Éï„Ç°„Ç§„É´„ÅåÈùûÂÖ¨Èñã - „É¶„Éº„Ç∂„Éº„Å´ÂÖ¨Èñã„Åô„Çã„ÅãÁ¢∫Ë™ç
            const makePublic = confirm(
                `„Äå${this.selectedImage.file_name}„Äç„ÅØÈùûÂÖ¨Èñã„Éï„Ç°„Ç§„É´„Åß„Åô„ÄÇ\n\n` +
                `Markdown„Éï„Ç°„Ç§„É´„Å´Âüã„ÇÅËæº„ÇÄ„Å´„ÅØ„ÄÅ„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂÖ¨ÈñãË®≠ÂÆö„Å´„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n` +
                `Ôºà„É™„É≥„ÇØ„ÇíÁü•„Å£„Å¶„ÅÑ„ÇãÂÖ®Âì°„ÅåÈñ≤Ë¶ßÂèØËÉΩ„Å´„Å™„Çä„Åæ„ÅôÔºâ\n\n` +
                `ÂÖ¨ÈñãË®≠ÂÆö„Å´„Åó„Åæ„Åô„ÅãÔºü`
            );

            if (!makePublic) {
                console.log('[DEBUG] User declined to make file public');
                return;
            }

            // Ê®©Èôê„ÇíÊõ¥Êñ∞
            console.log('[DEBUG] Updating file permissions...');
            const success = await this.driveAPI.updateFilePermissions(this.selectedImage.file_id);

            if (!success) {
                alert('„Éï„Ç°„Ç§„É´„ÅÆÂÖ¨ÈñãË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
                return;
            }

            // ÂÜçÂ∫¶„É°„Çø„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶webContentLink„ÇíÁ¢∫Ë™ç
            console.log('[DEBUG] Getting updated metadata...');
            const updatedMetadata = await this.driveAPI.getFileMetadata(this.selectedImage.file_id);

            if (updatedMetadata.webContentLink) {
                console.log('[DEBUG] File is now public, using webContentLink');
                this.returnImageUrl(updatedMetadata.webContentLink);
            } else {
                throw new Error('ÂÖ¨ÈñãË®≠ÂÆöÂæå„ÇÇwebContentLink„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
            }

        } catch (error) {
            console.error('Failed to get image:', error);
            alert(`ÁîªÂÉè„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
        }
    }

    /**
     * ÁîªÂÉèURL„ÇíËøî„ÅôÔºà„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂëº„Å≥Âá∫„ÅóÔºâ
     */
    returnImageUrl(url) {
        if (this.onSelectCallback) {
            this.onSelectCallback({
                url: url,
                fileName: this.selectedImage.file_name,
                fileId: this.selectedImage.file_id,
                isBlob: false  // ÂÖ¨ÈñãURL„Çí‰ΩøÁî®
            });
        }
        this.close();
    }

    /**
     * ÈÅ∏ÊäûÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíË®≠ÂÆö
     */
    onSelect(callback) {
        this.onSelectCallback = callback;
    }
}

// „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
let pickerInstance = null;

export function getDriveImagePicker() {
    console.log('[DEBUG] getDriveImagePicker() called');
    console.log('[DEBUG] pickerInstance exists:', !!pickerInstance);
    if (!pickerInstance) {
        console.log('[DEBUG] Creating new DriveImagePicker instance');
        pickerInstance = new DriveImagePicker();
        pickerInstance.initialize();
        console.log('[DEBUG] DriveImagePicker initialized');
    }
    return pickerInstance;
}
