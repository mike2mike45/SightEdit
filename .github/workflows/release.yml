name: Build and Release

on:
  push:
    tags:
      - 'v*' # v1.0.0, v2.0.1 などのタグでトリガー
  workflow_dispatch: # 手動実行も可能

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npx electron-builder --mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npx electron-builder --linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.msi
          dist/*.zip

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.zip

    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.tar.gz

  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: SightEdit ${{ github.ref_name }}
        body: |
          ## SightEdit ${{ github.ref_name }}
          
          ### 新機能・改善
          - 機能の詳細をここに記載
          
          ### バグ修正
          - 修正内容をここに記載
          
          ### ダウンロード
          - Windows: `SightEdit Setup.exe`
          - macOS: `SightEdit.dmg`
          - Linux: `SightEdit.AppImage`
          
          ### システム要件
          - Windows 10/11 (64-bit)
          - macOS 10.15以降
          - Ubuntu 18.04以降 / その他Linux
        draft: false
        prerelease: false

    - name: Upload Windows executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/SightEdit Setup 2.0.1.exe
        asset_name: SightEdit-Setup-${{ github.ref_name }}.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/SightEdit-2.0.1.dmg
        asset_name: SightEdit-${{ github.ref_name }}.dmg
        asset_content_type: application/octet-stream

    - name: Upload Linux AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/SightEdit-2.0.1.AppImage
        asset_name: SightEdit-${{ github.ref_name }}.AppImage
        asset_content_type: application/octet-stream